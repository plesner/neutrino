# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

## The built-in type of runtime-native strings.
def @String := @ctrino.get_builtin_type("Utf8");

def type @String is @Object;

## Returns a new string which is the concatenation of the two given strings.
@ctrino.builtin("str+str")
def ($this is @String)+($that is @String);

## Prints this string on stdout.
## TODO: This one definitely needs to go.
@ctrino.builtin("str.print_raw()")
def ($this is @String).print_raw();

## Returns true if the two strings contain the exact same characters. Note that
## there are many meaningful ways to compare strings for equality. This one does
## the dumbest thing possible and looks at the raw underlying characters of the
## string, ignoring character equivalences. This means that if you use this on
## non-ascii input that has not been explicitly normalized this may not give you
## the result you expect, and indeed for user-supplied input you will almost
## always want to use something else.
## TODO: implement the above mentioned "something else".
@ctrino.builtin("str==str")
def ($this is @String)==($that is @String);

## Returns an ascii character array containing the characters of this string.
## TODO: This so is not how this should work but it's one of those things that
##   will have to do for now.
@ctrino.builtin("str.get_ascii_characters()")
def ($this is @String).get_ascii_characters();

## Marker used to identify the ascii string view.
type @Ascii;

## Returns a ascii/ctype view of this string.
@ctrino.builtin("str.view_ascii")
def ($this is @String).view($enc == @Ascii);

## An ascii view of a string.
def @AsciiStringView := @ctrino.get_builtin_type("AsciiStringView");
def type @AsciiStringView is @Object;

## Returns the index'th ascii character in the underlying string.
@ctrino.builtin("ascii_string_view[]")
def ($this is @AsciiStringView)[$index];

## Returns the number of ascii characters in the string.
@ctrino.builtin("ascii_string_view.length")
def ($this is @AsciiStringView).length;

## Returns the substring of the underlying string that covers the ascii
## characters from $from to but not including $to.
@ctrino.builtin("ascii_string_view.substring")
def ($this is @AsciiStringView).substring($from is @Integer, $to is @Integer);

## An individual character in an ascii string.
def @AsciiCharacter := @ctrino.get_builtin_type("AsciiCharacter");
def type @AsciiCharacter is @Object;

## Returns the ascii character that has the given ordinal.
@ctrino.builtin("ascii_character.from_ordinal")
def ($this == @AsciiCharacter).from_ordinal($value is @Integer);

## Is this ascii character lower case?
@ctrino.builtin("ascii_character.is_lower_case?")
def ($this is @AsciiCharacter).is_lower_case?;

## Is this ascii character upper case?
@ctrino.builtin("ascii_character.is_upper_case?")
def ($this is @AsciiCharacter).is_upper_case?;

## Is this ascii character alphabetic?
@ctrino.builtin("ascii_character.is_alphabetic?")
def ($this is @AsciiCharacter).is_alphabetic?;

## Is this ascii character 0-9?
@ctrino.builtin("ascii_character.is_digit?")
def ($this is @AsciiCharacter).is_digit?;

## Is this ascii character a space?
@ctrino.builtin("ascii_character.is_whitespace?")
def ($this is @AsciiCharacter).is_whitespace?;

## Yields the integer ordinal that corresponds to this character.
@ctrino.builtin("ascii_character.ordinal")
def ($this is @AsciiCharacter).ordinal;

@ctrino.builtin("ascii_character<ascii_character")
def ($this is @AsciiCharacter)<($that is @AsciiCharacter);

def ($this is @AsciiCharacter)<=($that is @AsciiCharacter) =>
  ($that < $this).not;
